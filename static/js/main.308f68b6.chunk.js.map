{"version":3,"sources":["PlayerCard.js","App.js","serviceWorker.js","index.js"],"names":["PlayerCard","props","sign","image","className","src","Game","compPlayComp","setState","playerOne","signs","Math","floor","random","playerTwo","decideWinner","state","this","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAsBeA,EAhBI,SAACC,GAChB,IAAMC,EAAOD,EAAMC,KACfC,EAAQ,GAOZ,OALqBA,EAAR,SAATD,EAPK,kCAQS,aAATA,EATI,kCAEH,kCAYV,yBAAKE,UAAU,cACX,yBAAKC,IAAKF,MCmDHG,E,YAhEX,aAAe,IAAD,8BACV,+CASJC,aAAe,WACX,EAAKC,SAAS,CACVC,UAAW,EAAKC,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,WACtCC,UAAW,EAAKJ,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,cAbhC,EAgCdE,aAAe,WACX,OAAI,EAAKC,MAAMP,YAAc,EAAKO,MAAMF,UAC7B,cACyB,SAAzB,EAAKE,MAAMP,WAAiD,aAAzB,EAAKO,MAAMF,UAC9C,mBACyB,aAAzB,EAAKE,MAAMP,WAAqD,SAAzB,EAAKO,MAAMF,UAClD,mBACyB,UAAzB,EAAKE,MAAMP,WAAkD,SAAzB,EAAKO,MAAMF,UAC/C,mBACyB,SAAzB,EAAKE,MAAMP,WAAiD,UAAzB,EAAKO,MAAMF,UAC9C,mBACyB,aAAzB,EAAKE,MAAMP,WAAqD,UAAzB,EAAKO,MAAMF,UAClD,mBAEA,oBA5CX,EAAKJ,MAAQ,CAAC,OAAQ,QAAS,YAC/B,EAAKM,MAAQ,CACTP,UAAW,OACXK,UAAW,YALL,E,sEAmDV,OACI,yBAAKV,UAAU,SACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAYF,KAAMe,KAAKD,MAAMP,YAC7B,kBAAC,EAAD,CAAYP,KAAMe,KAAKD,MAAMF,aAEzC,yBAAKV,UAAU,UAAUa,KAAKF,gBACtB,4BAAQG,KAAK,SAASC,QAASF,KAAKV,cAApC,wB,GA3DGa,aCSCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.308f68b6.chunk.js","sourcesContent":["import React from 'react';\n\nconst scissors = \"https://i.imgur.com/pgjyhIZ.png\";\nconst rock = \"https://i.imgur.com/LghSkIw.png\";\nconst paper = \"https://i.imgur.com/2gsdqvR.png\";\n\nconst PlayerCard = (props) => {\n    const sign = props.sign;\n    let image = \"\";\n    \n    if (sign === 'rock') image = rock;\n    else if (sign === 'scissors') image = scissors;\n    else image = paper;\n    \n    \n    return(\n    <div className=\"playerCard\">\n        <img src={image}/>\n    </div>\n    )\n};\n\nexport default PlayerCard;","import React, {Component} from 'react';\nimport PlayerCard from './PlayerCard';\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.signs = [\"rock\", \"paper\", \"scissors\"];\n        this.state = {\n            playerOne: \"rock\",\n            playerTwo: \"scissors\",\n        };\n    };\n    \n    // this is where my methods will go.\n    compPlayComp = () => {\n        this.setState({\n            playerOne: this.signs[Math.floor(Math.random() * 3)],\n            playerTwo: this.signs[Math.floor(Math.random() * 3)],\n        })\n    }\n\n    /* decideWinner = () => {\n        const playerOne = this.state.playerOne;\n        const playerTwo = this.state.playerTwo;\n\n        if(playerOne === playerTwo) {\n            return \"It's a tie!\" \n\n        } else if {\n            ((playerOne === 'rock' && playerTwo === 'scissors') ||(playerTwo ===))\n        }\n        )\n    }*/\n    \n    // Decide the winner and display the message where 'Place the winner here' is currently display on top of the button.\n\n    decideWinner = () => {\n        if (this.state.playerOne === this.state.playerTwo) {\n            return \"It's a tie!\";\n        } else if (this.state.playerOne === 'rock' && this.state.playerTwo === 'scissors') {\n            return \"Player One wins!\";\n        } else if (this.state.playerOne === 'scissors' && this.state.playerTwo === 'rock') {\n            return \"Player Two wins!\";\n        } else if (this.state.playerOne === 'paper' && this.state.playerTwo === 'rock') {\n            return \"Player One wins!\";\n        } else if (this.state.playerOne === 'rock' && this.state.playerTwo === 'paper') {\n            return \"Player Two wins!\";\n        } else if (this.state.playerOne === 'scissors' && this.state.playerTwo === 'paper') {\n            return \"Player One wins!\";\n        } else {\n            return \"Player Two wins!\";\n        }\n    }\n    \n    render() {\n        return(\n            <div className=\"style\">\n                <div className=\"playerCard\">\n                    <PlayerCard sign={this.state.playerOne}/>\n                    <PlayerCard sign={this.state.playerTwo}/>\n                </div>\n        <div className=\"winner\">{this.decideWinner()}</div>\n                <button type=\"button\" onClick={this.compPlayComp}>Comp vs Comp :)</button>\n            </div>\n        )\n    }\n};\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}